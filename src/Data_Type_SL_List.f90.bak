!> @ingroup DerivedType
!> @{
!> @defgroup Data_Type_SL_ListDerivedType Data_Type_SL_List
!> @}

!> @ingroup PublicProcedure
!> @{
!> @defgroup Data_Type_SL_ListPublicProcedure Data_Type_SL_List
!> @}

!> @ingroup PrivateProcedure
!> @{
!> @defgroup Data_Type_SL_ListPrivateProcedure Data_Type_SL_List
!> @}

!> @brief Module Data_Type_SL_List contains the definition of Type_SL_List type and useful procedures for its handling.
module Data_Type_SL_List
!-----------------------------------------------------------------------------------------------------------------------------------
USE IR_Precision !< Integers and reals precision definition.
!-----------------------------------------------------------------------------------------------------------------------------------

!-----------------------------------------------------------------------------------------------------------------------------------
implicit none
private
public:: SL_List_Mold
!-----------------------------------------------------------------------------------------------------------------------------------

!-----------------------------------------------------------------------------------------------------------------------------------
! Parametrized types ID for identifying list data.
integer(I1P), parameter:: tp_NULL  = 0  !< Undefined type.
integer(I1P), parameter:: tp_SI1  = 1  !< Scalar integer(I1P) type.
integer(I1P), parameter:: tp_SI2  = 2  !< Scalar integer(I2P) type.
integer(I1P), parameter:: tp_SI4  = 3  !< Scalar integer(I4P) type.
integer(I1P), parameter:: tp_SI8  = 4  !< Scalar integer(I8P) type.
integer(I1P), parameter:: tp_SR4  = 5  !< Scalar real(R4P) type.
integer(I1P), parameter:: tp_SR8  = 6  !< Scalar real(R8P) type.
integer(I1P), parameter:: tp_SR16 = 7  !< Scalar real(R16P) type.
integer(I1P), parameter:: tp_SCH  = 8  !< Scalar character type.
integer(I1P), parameter:: tp_AI1  = 9  !< Array of integer(I1P) type.
integer(I1P), parameter:: tp_AI2  = 10 !< Array of integer(I2P) type.
integer(I1P), parameter:: tp_AI4  = 11 !< Array of integer(I4P) type.
integer(I1P), parameter:: tp_AI8  = 12 !< Array of integer(I8P) type.
integer(I1P), parameter:: tp_AR4  = 13 !< Array of real(R4P) type.
integer(I1P), parameter:: tp_AR8  = 14 !< Array of real(R8P) type.
integer(I1P), parameter:: tp_AR16 = 15 !< Array of real(R16P) type.
integer(I1P), parameter:: tp_ACH  = 16 !< Array of character type.
!> @brief Derived type containing link data of a single linked list.
type, public:: Type_SL_Link
  private
  integer(I1p)::                tp=tp_NULL   !< Type of data.
  integer(I1P),       pointer:: d(:)         !< Link data.
  type(Type_SL_Link), pointer:: n => null()  !< Pointer to the next link of the list.
endtype Type_SL_Link
!> @brief Derived type containing single linked list.
!> Type_SL_List is a \b generic Single Linked List. The term \b generic means that the data stored in each node (link) of the list
!> is \b generic: at present, the stored data can be integer (of any kinds defined in IR_Precision module), real (of any kinds
!> defined in IR_Precision module) and characters (of any length). In order to insert and retrieve data from the list nodes (and in
!> general for list manipulation) the type bound methods must be used, because the data is not directly accessible. This is due to
!> the internal representation of the data. In order to allow generic data, the intrinsic \b tansfer function is used to encode all
!> user data into the internal integer(I1P) array representation. As a consequence, if the node is directed accessed the user can
!> obtain unpredictable results due to the encoded internal representation.
!> The provide methods for list handling are the following:
!> @code
!> ...
!> type(Type_SL_List):: list
!> ...
!> @endcode
!> - insert data into list head:
!>   @code
!>   call list%puth(d=#user_data)
!>   @endcode
!> - insert data into list tail:
!>   @code
!>   call list%putt(d=#user_data)
!>   @endcode
!> - retrieve data from list head:
!>   @code
!>   call list%geth(d=#user_data)
!>   @endcode
!> - retrieve data from list tail:
!>   @code
!>   call list%gett(d=#user_data)
!>   @endcode
!> - retrieve data from list at some node:
!>   @code
!>   call list%get(cl=node,d=#user_data)
!>   @endcode
!> - converting list to array:
!>   @code
!>   call list%array(a=#user_array)
!>   @endcode
!> - freeing (destroying) list:
!>   @code
!>   call list%free()
!>   @endcode
!> @note For the character data, the methods get and array need a supplementary arguments, namely \b Nc being the length of the
!> character variable (array element for array method).
!> @note Array method converts the list into an array thus the list must have \b homogeneous data. Even if the list can have nodes
!> with different data type the conversion to a standard array can be completed successfully only if all data nodes are of the same
!> kind (e.g. all real or all integer or all character etc...).
!> @ingroup Data_Type_SL_ListDerivedType
type, public:: Type_SL_List
  private
  !integer(I1p)::                tp=tp_NULL   !< Type of data.
  !integer(I1P),       pointer:: d(:)         !< Link data.
  !type(Type_SL_List), pointer:: n => null()  !< Pointer to the next link of the list.
  type(Type_SL_Link), pointer:: f => null()  !< Pointer to the first link of the list.
  contains
    procedure, non_overridable:: free        ! Procedure for freeing (destroyng) the list.
    procedure, non_overridable:: leng        ! Procedure for computing the lenght of the list.
    generic::                    geth =>  &  ! Procedure for getting a link data from the list head (generic interface).
#ifdef r16p
                                 geth_R16,&
#endif
                                 geth_R8,geth_R4,geth_I8,geth_I4,geth_I2,geth_I1,geth_ch
    generic::                    gett =>  &  ! Procedure for getting a link data from the list tail (generic interface).
#ifdef r16p
                                 gett_R16,&
#endif
                                 gett_R8,gett_R4,gett_I8,gett_I4,gett_I2,gett_I1,gett_ch
    generic::                    puth =>  &  ! Procedure for inserting a link into the list head (generic interface).
#ifdef r16p
                                 puth_R16,&
#endif
                                 puth_R8,puth_R4,puth_I8,puth_I4,puth_I2,puth_I1,puth_ch
    generic::                    putt =>  &  ! Procedure for inserting a link into the list tail (generic interface).
#ifdef r16p
                                 putt_R16,&
#endif
                                 putt_R8,putt_R4,putt_I8,putt_I4,putt_I2,putt_I1,putt_ch
    generic::                    array =>  & ! Procedure for converting list to array (generic interface).
#ifdef r16p
                                 array_R16,&
#endif
                                 array_R8,array_R4,array_I8,array_I4,array_I2,array_I1,array_ch
#ifdef r16p
    procedure, non_overridable:: geth_R16    ! Procedure for getting a link data from the list head (R16P).
#endif
    procedure, non_overridable:: geth_R8     ! Procedure for getting a link data from the list head (R8P).
    procedure, non_overridable:: geth_R4     ! Procedure for getting a link data from the list head (R4P).
    procedure, non_overridable:: geth_I8     ! Procedure for getting a link data from the list head (I4P).
    procedure, non_overridable:: geth_I4     ! Procedure for getting a link data from the list head (I4P).
    procedure, non_overridable:: geth_I2     ! Procedure for getting a link data from the list head (I4P).
    procedure, non_overridable:: geth_I1     ! Procedure for getting a link data from the list head (I4P).
    procedure, non_overridable:: geth_ch     ! Procedure for getting a link data from the list head (character).
#ifdef r16p
    procedure, non_overridable:: gett_R16    ! Procedure for getting a link data from the list tail (R16P).
#endif
    procedure, non_overridable:: gett_R8     ! Procedure for getting a link data from the list tail (R8P).
    procedure, non_overridable:: gett_R4     ! Procedure for getting a link data from the list tail (R4P).
    procedure, non_overridable:: gett_I8     ! Procedure for getting a link data from the list tail (I4P).
    procedure, non_overridable:: gett_I4     ! Procedure for getting a link data from the list tail (I4P).
    procedure, non_overridable:: gett_I2     ! Procedure for getting a link data from the list tail (I4P).
    procedure, non_overridable:: gett_I1     ! Procedure for getting a link data from the list tail (I4P).
    procedure, non_overridable:: gett_ch     ! Procedure for getting a link data from the list tail (character).
#ifdef r16p
    procedure, non_overridable:: puth_R16    ! Procedure for inserting a link into the list head (R16P).
#endif
    procedure, non_overridable:: puth_R8     ! Procedure for inserting a link into the list head (R8P).
    procedure, non_overridable:: puth_R4     ! Procedure for inserting a link into the list head (R4P).
    procedure, non_overridable:: puth_I8     ! Procedure for inserting a link into the list head (I8P).
    procedure, non_overridable:: puth_I4     ! Procedure for inserting a link into the list head (I4P).
    procedure, non_overridable:: puth_I2     ! Procedure for inserting a link into the list head (I2P).
    procedure, non_overridable:: puth_I1     ! Procedure for inserting a link into the list head (I1P).
    procedure, non_overridable:: puth_ch     ! Procedure for inserting a link into the list head (character).
#ifdef r16p
    procedure, non_overridable:: putt_R16    ! Procedure for inserting a link into the list tail (R16P).
#endif
    procedure, non_overridable:: putt_R8     ! Procedure for inserting a link into the list tail (R8P).
    procedure, non_overridable:: putt_R4     ! Procedure for inserting a link into the list tail (R4P).
    procedure, non_overridable:: putt_I8     ! Procedure for inserting a link into the list tail (I8P).
    procedure, non_overridable:: putt_I4     ! Procedure for inserting a link into the list tail (I4P).
    procedure, non_overridable:: putt_I2     ! Procedure for inserting a link into the list tail (I2P).
    procedure, non_overridable:: putt_I1     ! Procedure for inserting a link into the list tail (I1P).
    procedure, non_overridable:: putt_ch     ! Procedure for inserting a link into the list tail (character).
#ifdef r16p
    procedure, non_overridable:: array_R16   ! Procedure for converting list to array (R16P).
#endif
    procedure, non_overridable:: array_R8    ! Procedure for converting list to array (R8P).
    procedure, non_overridable:: array_R4    ! Procedure for converting list to array (R4P).
    procedure, non_overridable:: array_I8    ! Procedure for converting list to array (I8P).
    procedure, non_overridable:: array_I4    ! Procedure for converting list to array (I4P).
    procedure, non_overridable:: array_I2    ! Procedure for converting list to array (I2P).
    procedure, non_overridable:: array_I1    ! Procedure for converting list to array (I1P).
    procedure, non_overridable:: array_ch    ! Procedure for converting list to array (character).
endtype Type_SL_List
!> @ingroup Data_Type_SL_ListGlobalVarPar
!> @{
integer(I1P), pointer:: SL_List_Mold(:)=>null() !< Mold prototype for list data.
!> @}
!-----------------------------------------------------------------------------------------------------------------------------------
contains
  !> @ingroup Data_Type_SL_ListPrivateProcedure
  !> @{
  !> @brief Recursive subroutine for freeing (destroyng) the list.
  recursive subroutine free(l)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l !< List.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (associated(l%n)) then
    call free(l%n)
    deallocate(l%n)
  endif
  l%n => null()
  if (associated(l%d)) deallocate(l%d)
  l%d => null()
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine free

  !> @brief Function for computing the lenght of the list.
  function leng(l) result(Nl)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN):: l    ! List.
  integer(I4P)::                    Nl   ! Elements number.
  type(Type_SL_List), pointer::     n    ! Pointer for scanning the list.
  integer(I1P),       pointer::     d(:) ! Pointer for scanning the list.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  Nl = 0
  d => l%d
  n => l%n
  do while (associated(d))
    Nl = Nl + 1
    if (associated(n)) then
      d => n%d
      n => n%n
    else
      d => null()
    endif
  enddo
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endfunction leng

#ifdef r16p
  !> @brief Subroutine for getting a link data from the list head (R16P).
  subroutine geth_R16(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  real(R16P),          intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0._R16P
  if (associated(l%d)) then
    d = transfer(l%d,1._R16P)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine geth_R16
#endif

  !> @brief Subroutine for getting a link data from the list head (R8P).
  subroutine geth_R8(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  real(R8P),           intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0._R8P
  if (associated(l%d)) then
    d = transfer(l%d,1._R8P)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine geth_R8

  !> @brief Subroutine for getting a link data from the list head (R4P).
  subroutine geth_R4(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  real(R4P),           intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0._R4P
  if (associated(l%d)) then
    d = transfer(l%d,1._R4P)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine geth_R4

  !> @brief Subroutine for getting a link data from the list head (I8P).
  subroutine geth_I8(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  integer(I8P),        intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0_I8P
  if (associated(l%d)) then
    d = transfer(l%d,1_I8P)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine geth_I8

  !> @brief Subroutine for getting a link data from the list head (I4P).
  subroutine geth_I4(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  integer(I4P),        intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0_I4P
  if (associated(l%d)) then
    d = transfer(l%d,1_I4P)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine geth_I4

  !> @brief Subroutine for getting a link data from the list head (I2P).
  subroutine geth_I2(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  integer(I2P),        intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0_I2P
  if (associated(l%d)) then
    d = transfer(l%d,1_I2P)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine geth_I2

  !> @brief Subroutine for getting a link data from the list head (I1P).
  subroutine geth_I1(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  integer(I1P),        intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0_I1P
  if (associated(l%d)) then
    d = transfer(l%d,1_I1P)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine geth_I1

  !> @brief Subroutine for getting a link data from the list head (character).
  subroutine geth_ch(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l    ! List.
  character(*),        intent(OUT):: d    ! Link data.
  character(len(d))::                mold ! Mold prototype.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = ''
  if (associated(l%d)) then
    d = transfer(l%d,mold(1:min(len(d),size(l%d,dim=1))))
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine geth_ch

#ifdef r16p
  !> @brief Subroutine for getting a link data from the list tail (R16P).
  recursive subroutine gett_R16(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  real(R16P),          intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0._R16P
  if (.not.associated(l%n)) then
    if (associated(l%d)) then
      d = transfer(l%d,1._R16P)
    endif
  else
    call gett_R16(l=l%n,d=d)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine gett_R16
#endif

  !> @brief Subroutine for getting a link data from the list tail (R8P).
  recursive subroutine gett_R8(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  real(R8P),           intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0._R8P
  if (.not.associated(l%n)) then
    if (associated(l%d)) then
      d = transfer(l%d,1._R8P)
    endif
  else
    call gett_R8(l=l%n,d=d)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine gett_R8

  !> @brief Subroutine for getting a link data from the list tail (R4P).
  recursive subroutine gett_R4(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  real(R4P),           intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0._R4P
  if (.not.associated(l%n)) then
    if (associated(l%d)) then
      d = transfer(l%d,1._R4P)
    endif
  else
    call gett_R4(l=l%n,d=d)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine gett_R4

  !> @brief Subroutine for getting a link data from the list tail (I8P).
  recursive subroutine gett_I8(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  integer(I8P),        intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0_I8P
  if (.not.associated(l%n)) then
    if (associated(l%d)) then
      d = transfer(l%d,1_I8P)
    endif
  else
    call gett_I8(l=l%n,d=d)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine gett_I8

  !> @brief Subroutine for getting a link data from the list tail (I4P).
  recursive subroutine gett_I4(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  integer(I4P),        intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0_I4P
  if (.not.associated(l%n)) then
    if (associated(l%d)) then
      d = transfer(l%d,1_I4P)
    endif
  else
    call gett_I4(l=l%n,d=d)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine gett_I4

  !> @brief Subroutine for getting a link data from the list tail (I2P).
  recursive subroutine gett_I2(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  integer(I2P),        intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0_I2P
  if (.not.associated(l%n)) then
    if (associated(l%d)) then
      d = transfer(l%d,1_I2P)
    endif
  else
    call gett_I2(l=l%n,d=d)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine gett_I2

  !> @brief Subroutine for getting a link data from the list tail (I1P).
  recursive subroutine gett_I1(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l  ! List.
  integer(I8P),        intent(OUT):: d  ! Link data.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = 0_I1P
  if (.not.associated(l%n)) then
    if (associated(l%d)) then
      d = transfer(l%d,1_I1P)
    endif
  else
    call gett_I1(l=l%n,d=d)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine gett_I1

  !> @brief Subroutine for getting a link data from the list tail (character).
  recursive subroutine gett_ch(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(IN)::  l    ! List.
  character(*),        intent(OUT):: d    ! Link data.
  character(len(d))::                mold ! Mold prototype.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  d = ''
  if (.not.associated(l%n)) then
    if (associated(l%d)) then
      d = transfer(l%d,mold(1:min(len(d),size(l%d,dim=1))))
    endif
  else
    call gett_ch(l=l%n,d=d)
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine gett_ch

#ifdef r16p
  !> @brief Subroutine for inserting a link data into the list head (R16P).
  subroutine puth_R16(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l               !< List.
  real(R16P),          intent(IN)::    d               !< Data of the current link.
  integer(I1P),       pointer::        dtmp(:)=>null() !< Temporary data.
  type(Type_SL_List), pointer::        n=>null()       !< New link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (.not.associated(l%d)) then
    allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  else
    allocate(dtmp(1:bit_size(l%d)/8)) ; dtmp = l%d ; l%d = transfer(d,SL_List_Mold)      ! storing l%d in dtmp and inseting d in l%d
    allocate(n) ; allocate(n%d(1:bit_size(dtmp)/8)) ; n%d = dtmp ; n%n => l%n ; l%n => n ! insertin new link with dtmp data
    deallocate(dtmp)                                                                     ! deallocating dtmp
  endif
  l%tp = tp_SR16
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine puth_R16
#endif

  !> @brief Subroutine for inserting a link data into the list head (R8P).
  subroutine puth_R8(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l               !< List.
  real(R8P),           intent(IN)::    d               !< Data of the current link.
  integer(I1P),       pointer::        dtmp(:)=>null() !< Temporary data.
  type(Type_SL_List), pointer::        n=>null()       !< New link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (.not.associated(l%d)) then
    allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  else
    allocate(dtmp(1:bit_size(l%d)/8)) ; dtmp = l%d ; l%d = transfer(d,SL_List_Mold)      ! storing l%d in dtmp and inseting d in l%d
    allocate(n) ; allocate(n%d(1:bit_size(dtmp)/8)) ; n%d = dtmp ; n%n => l%n ; l%n => n ! insertin new link with dtmp data
    deallocate(dtmp)                                                                     ! deallocating dtmp
  endif
  l%tp = tp_SR8
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine puth_R8

  !> @brief Subroutine for inserting a link data into the list head (R4P).
  subroutine puth_R4(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l               !< List.
  real(R4P),           intent(IN)::    d               !< Data of the current link.
  integer(I1P),       pointer::        dtmp(:)=>null() !< Temporary data.
  type(Type_SL_List), pointer::        n=>null()       !< New link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (.not.associated(l%d)) then
    allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  else
    allocate(dtmp(1:bit_size(l%d)/8)) ; dtmp = l%d ; l%d = transfer(d,SL_List_Mold)      ! storing l%d in dtmp and inseting d in l%d
    allocate(n) ; allocate(n%d(1:bit_size(dtmp)/8)) ; n%d = dtmp ; n%n => l%n ; l%n => n ! insertin new link with dtmp data
    deallocate(dtmp)                                                                     ! deallocating dtmp
  endif
  l%tp = tp_SR4
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine puth_R4

  !> @brief Subroutine for inserting a link data into the list head (I8P).
  subroutine puth_I8(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l               !< List.
  integer(I8P),        intent(IN)::    d               !< Data of the current link.
  integer(I1P),       pointer::        dtmp(:)=>null() !< Temporary data.
  type(Type_SL_List), pointer::        n=>null()       !< New link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (.not.associated(l%d)) then
    allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  else
    allocate(dtmp(1:bit_size(l%d)/8)) ; dtmp = l%d ; l%d = transfer(d,SL_List_Mold)      ! storing l%d in dtmp and inseting d in l%d
    allocate(n) ; allocate(n%d(1:bit_size(dtmp)/8)) ; n%d = dtmp ; n%n => l%n ; l%n => n ! insertin new link with dtmp data
    deallocate(dtmp)                                                                     ! deallocating dtmp
  endif
  l%tp = tp_SI8
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine puth_I8

  !> @brief Subroutine for inserting a link data into the list head (I4P).
  subroutine puth_I4(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l               !< List.
  integer(I4P),        intent(IN)::    d               !< Data of the current link.
  integer(I1P),       pointer::        dtmp(:)=>null() !< Temporary data.
  type(Type_SL_List), pointer::        n=>null()       !< New link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (.not.associated(l%d)) then
    allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  else
    allocate(dtmp(1:bit_size(l%d)/8)) ; dtmp = l%d ; l%d = transfer(d,SL_List_Mold)      ! storing l%d in dtmp and inseting d in l%d
    allocate(n) ; allocate(n%d(1:bit_size(dtmp)/8)) ; n%d = dtmp ; n%n => l%n ; l%n => n ! insertin new link with dtmp data
    deallocate(dtmp)                                                                     ! deallocating dtmp
  endif
  l%tp = tp_SI4
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine puth_I4

  !> @brief Subroutine for inserting a link data into the list head (I2P).
  subroutine puth_I2(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l               !< List.
  integer(I2P),        intent(IN)::    d               !< Data of the current link.
  integer(I1P),       pointer::        dtmp(:)=>null() !< Temporary data.
  type(Type_SL_List), pointer::        n=>null()       !< New link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (.not.associated(l%d)) then
    allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  else
    allocate(dtmp(1:bit_size(l%d)/8)) ; dtmp = l%d ; l%d = transfer(d,SL_List_Mold)      ! storing l%d in dtmp and inseting d in l%d
    allocate(n) ; allocate(n%d(1:bit_size(dtmp)/8)) ; n%d = dtmp ; n%n => l%n ; l%n => n ! insertin new link with dtmp data
    deallocate(dtmp)                                                                     ! deallocating dtmp
  endif
  l%tp = tp_SI2
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine puth_I2

  !> @brief Subroutine for inserting a link data into the list head (I1P).
  subroutine puth_I1(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l               !< List.
  integer(I1P),        intent(IN)::    d               !< Data of the current link.
  integer(I1P),       pointer::        dtmp(:)=>null() !< Temporary data.
  type(Type_SL_List), pointer::        n=>null()       !< New link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (.not.associated(l%d)) then
    allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  else
    allocate(dtmp(1:bit_size(l%d)/8)) ; dtmp = l%d ; l%d = transfer(d,SL_List_Mold)      ! storing l%d in dtmp and inseting d in l%d
    allocate(n) ; allocate(n%d(1:bit_size(dtmp)/8)) ; n%d = dtmp ; n%n => l%n ; l%n => n ! insertin new link with dtmp data
    deallocate(dtmp)                                                                     ! deallocating dtmp
  endif
  l%tp = tp_SI1
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine puth_I1

  !> @brief Subroutine for inserting a link data into the list head (character).
  subroutine puth_ch(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l               !< List.
  character(*),        intent(IN)::    d               !< Data of the current link.
  integer(I1P),       pointer::        dtmp(:)=>null() !< Temporary data.
  type(Type_SL_List), pointer::        n=>null()       !< New link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (.not.associated(l%d)) then
    allocate(l%d(1:len(d))) ; l%d = transfer(d,SL_List_Mold)
  else
    allocate(dtmp(1:bit_size(l%d)/8)) ; dtmp = l%d ; l%d = transfer(d,SL_List_Mold)      ! storing l%d in dtmp
    deallocate(l%d) ; allocate(l%d(1:len(d))) ; l%d = transfer(d,SL_List_Mold)           ! inseting d in l%d
    allocate(n) ; allocate(n%d(1:bit_size(dtmp)/8)) ; n%d = dtmp ; n%n => l%n ; l%n => n ! insertin new link with dtmp data
    deallocate(dtmp)                                                                     ! deallocating dtmp
  endif
  l%tp = tp_SCH
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine puth_ch

#ifdef r16p
  !> @brief Recursive subroutine for inserting a link data into the list tail (R16P).
  recursive subroutine putt_R16(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l !< List.
  real(R16P),          intent(IN)::    d !< Data of the current link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (associated(l%d)) then
    if (.not.associated(l%n)) allocate(l%n) ; call putt_R16(l=l%n,d=d)
  else
    if (.not.associated(l%d)) allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  endif
  l%tp = tp_SR16
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine putt_R16
#endif

  !> @brief Recursive subroutine for inserting a link data into the list tail (R8P).
  recursive subroutine putt_R8(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l !< List.
  real(R8P),           intent(IN)::    d !< Data of the current link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (associated(l%d)) then
    if (.not.associated(l%n)) allocate(l%n) ; call putt_R8(l=l%n,d=d)
  else
    if (.not.associated(l%d)) allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  endif
  l%tp = tp_SR8
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine putt_R8

  !> @brief Recursive subroutine for inserting a link data into the list tail (R4P).
  recursive subroutine putt_R4(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l !< List.
  real(R4P),           intent(IN)::    d !< Data of the current link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (associated(l%d)) then
    if (.not.associated(l%n)) allocate(l%n) ; call putt_R4(l=l%n,d=d)
  else
    if (.not.associated(l%d)) allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  endif
  l%tp = tp_SR4
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine putt_R4

  !> @brief Recursive subroutine for inserting a link data into the list tail (I18).
  recursive subroutine putt_I8(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l !< List.
  integer(I8P),        intent(IN)::    d !< Data of the current link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (associated(l%d)) then
    if (.not.associated(l%n)) allocate(l%n) ; call putt_I8(l=l%n,d=d)
  else
    if (.not.associated(l%d)) allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  endif
  l%tp = tp_SI8
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine putt_I8

  !> @brief Recursive subroutine for inserting a link data into the list tail (I4P).
  recursive subroutine putt_I4(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l !< List.
  integer(I4P),        intent(IN)::    d !< Data of the current link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (associated(l%d)) then
    if (.not.associated(l%n)) allocate(l%n) ; call putt_I4(l=l%n,d=d)
  else
    if (.not.associated(l%d)) allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  endif
  l%tp = tp_SI4
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine putt_I4

  !> @brief Recursive subroutine for inserting a link data into the list tail (I2P).
  recursive subroutine putt_I2(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l !< List.
  integer(I2P),        intent(IN)::    d !< Data of the current link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (associated(l%d)) then
    if (.not.associated(l%n)) allocate(l%n) ; call putt_I2(l=l%n,d=d)
  else
    if (.not.associated(l%d)) allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  endif
  l%tp = tp_SI2
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine putt_I2

  !> @brief Recursive subroutine for inserting a link data into the list tail (I1P).
  recursive subroutine putt_I1(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l !< List.
  integer(I1P),        intent(IN)::    d !< Data of the current link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (associated(l%d)) then
    if (.not.associated(l%n)) allocate(l%n) ; call putt_I1(l=l%n,d=d)
  else
    if (.not.associated(l%d)) allocate(l%d(1:bit_size(d)/8)) ; l%d = transfer(d,SL_List_Mold)
  endif
  l%tp = tp_SI1
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine putt_I1

  !> @brief Recursive subroutine for inserting a link data into the list tail (character).
  recursive subroutine putt_ch(l,d)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List), intent(INOUT):: l !< List.
  character(*),        intent(IN)::    d !< Data of the current link.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  if (associated(l%d)) then
    if (.not.associated(l%n)) allocate(l%n) ; call putt_ch(l=l%n,d=d)
  else
    if (.not.associated(l%d)) allocate(l%d(1:len(d))) ; l%d = transfer(d,SL_List_Mold)
  endif
  l%tp = tp_SCH
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine putt_ch

#ifdef r16p
  !> @brief Subroutine for converting list to array (R16P).
  subroutine array_R16(l,a)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List),     intent(IN)::  l    ! List.
  real(R16P), allocatable, intent(OUT):: a(:) ! Array containing the list.
  type(Type_SL_List), pointer::          n    ! Pointer for scanning the list.
  integer(I1P),       pointer::          d(:) ! Pointer for scanning the list.
  integer(I4P)::                         Nl   ! Elements number.
  integer(I4P)::                         e    ! Elements counter.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  Nl = l%leng()
  if (allocated(a)) deallocate(a)
  if (Nl>0) then
    allocate(a(1:Nl))
    e = 0
    d => l%d
    n => l%n
    do while (associated(d))
      e = e + 1
      a(e) = transfer(d,1._R16P)
      if (associated(n)) then
        d => n%d
        n => n%n
      else
        d => null()
      endif
    enddo
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine array_R16
#endif

  !> @brief Subroutine for converting list to array (R8P).
  subroutine array_R8(l,a)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List),    intent(IN)::  l    ! List.
  real(R8P), allocatable, intent(OUT):: a(:) ! Array containing the list.
  type(Type_SL_List), pointer::         n    ! Pointer for scanning the list.
  integer(I1P),       pointer::         d(:) ! Pointer for scanning the list.
  integer(I4P)::                        Nl   ! Elements number.
  integer(I4P)::                        e    ! Elements counter.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  Nl = l%leng()
  if (allocated(a)) deallocate(a)
  if (Nl>0) then
    allocate(a(1:Nl))
    e = 0
    d => l%d
    n => l%n
    do while (associated(d))
      e = e + 1
      a(e) = transfer(d,1._R8P)
      if (associated(n)) then
        d => n%d
        n => n%n
      else
        d => null()
      endif
    enddo
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine array_R8

  !> @brief Subroutine for converting list to array (R4P).
  subroutine array_R4(l,a)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List),    intent(IN)::  l    ! List.
  real(R4P), allocatable, intent(OUT):: a(:) ! Array containing the list.
  type(Type_SL_List), pointer::         n    ! Pointer for scanning the list.
  integer(I1P),       pointer::         d(:) ! Pointer for scanning the list.
  integer(I4P)::                        Nl   ! Elements number.
  integer(I4P)::                        e    ! Elements counter.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  Nl = l%leng()
  if (allocated(a)) deallocate(a)
  if (Nl>0) then
    allocate(a(1:Nl))
    e = 0
    d => l%d
    n => l%n
    do while (associated(d))
      e = e + 1
      a(e) = transfer(d,1._R4P)
      if (associated(n)) then
        d => n%d
        n => n%n
      else
        d => null()
      endif
    enddo
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine array_R4

  !> @brief Subroutine for converting list to array (I8P).
  subroutine array_I8(l,a)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List),       intent(IN)::  l    ! List.
  integer(I8P), allocatable, intent(OUT):: a(:) ! Array containing the list.
  type(Type_SL_List), pointer::            n    ! Pointer for scanning the list.
  integer(I1P),       pointer::            d(:) ! Pointer for scanning the list.
  integer(I4P)::                           Nl   ! Elements number.
  integer(I4P)::                           e    ! Elements counter.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  Nl = l%leng()
  if (allocated(a)) deallocate(a)
  if (Nl>0) then
    allocate(a(1:Nl))
    e = 0
    d => l%d
    n => l%n
    do while (associated(d))
      e = e + 1
      a(e) = transfer(d,1_I8P)
      if (associated(n)) then
        d => n%d
        n => n%n
      else
        d => null()
      endif
    enddo
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine array_I8

  !> @brief Subroutine for converting list to array (I4P).
  subroutine array_I4(l,a)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List),       intent(IN)::  l    ! List.
  integer(I4P), allocatable, intent(OUT):: a(:) ! Array containing the list.
  type(Type_SL_List), pointer::            n    ! Pointer for scanning the list.
  integer(I1P),       pointer::            d(:) ! Pointer for scanning the list.
  integer(I4P)::                           Nl   ! Elements number.
  integer(I4P)::                           e    ! Elements counter.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  Nl = l%leng()
  if (allocated(a)) deallocate(a)
  if (Nl>0) then
    allocate(a(1:Nl))
    e = 0
    d => l%d
    n => l%n
    do while (associated(d))
      e = e + 1
      a(e) = transfer(d,1_I4P)
      if (associated(n)) then
        d => n%d
        n => n%n
      else
        d => null()
      endif
    enddo
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine array_I4

  !> @brief Subroutine for converting list to array (I2P).
  subroutine array_I2(l,a)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List),       intent(IN)::  l    ! List.
  integer(I2P), allocatable, intent(OUT):: a(:) ! Array containing the list.
  type(Type_SL_List), pointer::            n    ! Pointer for scanning the list.
  integer(I1P),       pointer::            d(:) ! Pointer for scanning the list.
  integer(I4P)::                           Nl   ! Elements number.
  integer(I4P)::                           e    ! Elements counter.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  Nl = l%leng()
  if (allocated(a)) deallocate(a)
  if (Nl>0) then
    allocate(a(1:Nl))
    e = 0
    d => l%d
    n => l%n
    do while (associated(d))
      e = e + 1
      a(e) = transfer(d,1_I2P)
      if (associated(n)) then
        d => n%d
        n => n%n
      else
        d => null()
      endif
    enddo
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine array_I2

  !> @brief Subroutine for converting list to array (I1P).
  subroutine array_I1(l,a)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List),       intent(IN)::  l    ! List.
  integer(I1P), allocatable, intent(OUT):: a(:) ! Array containing the list.
  type(Type_SL_List), pointer::            n    ! Pointer for scanning the list.
  integer(I1P),       pointer::            d(:) ! Pointer for scanning the list.
  integer(I4P)::                           Nl   ! Elements number.
  integer(I4P)::                           e    ! Elements counter.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  Nl = l%leng()
  if (allocated(a)) deallocate(a)
  if (Nl>0) then
    allocate(a(1:Nl))
    e = 0
    d => l%d
    n => l%n
    do while (associated(d))
      e = e + 1
      a(e) = transfer(d,1_I1P)
      if (associated(n)) then
        d => n%d
        n => n%n
      else
        d => null()
      endif
    enddo
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine array_I1

  !> @brief Subroutine for converting list to array (character).
  subroutine array_ch(l,Nc,a)
  !---------------------------------------------------------------------------------------------------------------------------------
  implicit none
  class(Type_SL_List),        intent(IN)::  l    ! List.
  integer(I4P),               intent(IN)::  Nc   ! Number of character of each list element.
  character(Nc), allocatable, intent(OUT):: a(:) ! Array containing the list.
  character(Nc)::                           mold ! Mold prototype.
  type(Type_SL_List), pointer::             n    ! Pointer for scanning the list.
  integer(I1P),       pointer::             d(:) ! Pointer for scanning the list.
  integer(I4P)::                            Nl   ! Elements number.
  integer(I4P)::                            e    ! Elements counter.
  !---------------------------------------------------------------------------------------------------------------------------------

  !---------------------------------------------------------------------------------------------------------------------------------
  Nl = l%leng()
  if (allocated(a)) deallocate(a)
  if (Nl>0) then
    allocate(a(1:Nl))
    e = 0
    d => l%d
    n => l%n
    do while (associated(d))
      e = e + 1
      a(e) = transfer(d,mold)
      if (associated(n)) then
        d => n%d
        n => n%n
      else
        d => null()
      endif
    enddo
  endif
  return
  !---------------------------------------------------------------------------------------------------------------------------------
  endsubroutine array_ch
  !> @}
endmodule Data_Type_SL_List
